AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Supply Chain Management System

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: SupplyChainSystem
        LOG_LEVEL: INFO
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
      MaxAge: "'3000'"
      AllowCredentials: "'false'"

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 200
          ThrottlingRateLimit: 100
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-orders
      AttributeDefinitions:
        - AttributeName: order_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-docs-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DocumentCleanup
            Status: Enabled
            ExpirationInDays: 90

  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-orders
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20

  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-orders

  OrderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref OrderQueue]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt OrderQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderTopic

  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/order-service
      Handler: app.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          ORDER_TOPIC_ARN: !Ref OrderTopic
      Events:
        CreateOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: POST
            RestApiId: !Ref Api
        GetOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: GET
            RestApiId: !Ref Api
        GetOrder:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: GET
            RestApiId: !Ref Api
        UpdateOrderStatus:
          Type: Api
          Properties:
            Path: /orders/{orderId}/status
            Method: PATCH
            RestApiId: !Ref Api
        DeleteOrder:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: DELETE
            RestApiId: !Ref Api
        GetOrderDocument:
          Type: Api
          Properties:
            Path: /orders/{orderId}/document
            Method: GET
            RestApiId: !Ref Api

  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/health
      Handler: app.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Events:
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref Api

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  OrdersTableName:
    Description: Orders DynamoDB Table Name
    Value: !Ref OrdersTable
  DocumentsBucketName:
    Description: Documents S3 Bucket Name
    Value: !Ref DocumentsBucket
  OrderQueueURL:
    Description: SQS Queue URL
    Value: !Ref OrderQueue
  OrderTopicARN:
    Description: SNS Topic ARN
    Value: !Ref OrderTopic